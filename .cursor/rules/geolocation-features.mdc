---
description: Geolocation-specific patterns and utilities
globs: src/routes/deals.public.routes.ts
---

# Geolocation Features and Patterns

## Distance Calculation

- **Haversine Formula**: Use for accurate distance calculations between coordinates
- **Earth Radius**: 6371 km for standard calculations
- **Distance Units**: Always return distances in kilometers

```typescript
function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
  const R = 6371; // Earth's radius in kilometers
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c; // Distance in kilometers
}
```

## Coordinate Validation

- **Latitude Range**: -90 to 90 degrees
- **Longitude Range**: -180 to 180 degrees
- **Required Pairs**: Both coordinates must be provided together
- **Number Validation**: Ensure valid numeric values

## Geolocation Query Patterns

- **Radius Filtering**: Filter deals within specified radius
- **Distance Sorting**: Sort results by proximity to user
- **Null Handling**: Handle merchants without coordinates gracefully

## Performance Optimization

- **Database Filtering**: Use database-level filtering for coordinates
- **Index Utilization**: Leverage geospatial indexes for performance
- **Query Optimization**: Filter by status before distance calculations

## Response Formatting

- **Distance Inclusion**: Include calculated distance in response
- **Rounding**: Round distances to 2 decimal places for display
- **Coordinate Precision**: Maintain full precision in database, format for display