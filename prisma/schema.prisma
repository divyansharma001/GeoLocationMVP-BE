// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENUMS for controlled values ---

enum UserRole {
  USER
  MERCHANT
  ADMIN
}

enum MerchantStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DealCategory {
  FOOD_AND_BEVERAGE
  RETAIL
  ENTERTAINMENT
  HEALTH_AND_FITNESS
  BEAUTY_AND_SPA
  AUTOMOTIVE
  TRAVEL
  EDUCATION
  TECHNOLOGY
  HOME_AND_GARDEN
  OTHER
}

enum DealType {
  STANDARD
  HAPPY_HOUR
  RECURRING
}

// --- GAMIFICATION ---
enum PointEventType {
  SIGNUP
  FIRST_CHECKIN_DEAL
  CHECKIN
}


// --- CORE MODELS ---

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(USER) // All new users start as a regular USER
  // Gamification / reward points accumulated by the user
  points    Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A User can own one Merchant profile
  merchant  Merchant?

  // A User can save many Deals
  savedDeals UserDeal[]

  // Point events log
  pointEvents UserPointEvent[]

  // Check-ins
  checkIns   CheckIn[]
}

model Merchant {
  id            Int      @id @default(autoincrement())
  businessName  String
  address       String
  description   String?
  logoUrl       String?
  status        MerchantStatus @default(PENDING) // New merchants are PENDING by default
  
  // Geolocation fields
  latitude      Float?
  longitude     Float?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // A Merchant must be owned by one User
  ownerId       Int      @unique
  owner         User     @relation(fields: [ownerId], references: [id])

  // A Merchant can have many Deals
  deals         Deal[]
}

model Deal {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  imageUrl      String?

  // Basic deal parameters (can be expanded later)
  discountPercentage Int?
  discountAmount     Float?
  
  // Category for filtering and organization
  category      DealCategory @default(OTHER)
  
  // Deal type for different deal behaviors
  dealType      DealType @default(STANDARD)
  
  // Recurring days for recurring deals (e.g., "Taco Tuesday")
  // Stored as comma-separated values: "MONDAY,TUESDAY,WEDNESDAY"
  recurringDays String?
  
  // Validity period
  startTime     DateTime
  endTime       DateTime
  
  redemptionInstructions String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Each Deal belongs to one Merchant
  merchantId    Int
  merchant      Merchant @relation(fields: [merchantId], references: [id])

  // A Deal can be saved by many Users
  savedByUsers  UserDeal[]

  // Point events
  pointEvents UserPointEvent[]

  // Check-ins
  checkIns  CheckIn[]
}

// Junction table for User-Deal relationship (saved deals)
model UserDeal {
  id        Int      @id @default(autoincrement())
  userId    Int
  dealId    Int
  savedAt   DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deal      Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)

  // Ensure a user can only save a deal once
  @@unique([userId, dealId])
}

// Log of points awarded to users for various actions
model UserPointEvent {
  id        Int            @id @default(autoincrement())
  userId    Int
  dealId    Int?
  type      PointEventType
  points    Int
  createdAt DateTime       @default(now())

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  deal      Deal?          @relation(fields: [dealId], references: [id])

  @@index([userId, type])
  @@index([userId, dealId])
}

// Individual physical proximity confirmations
model CheckIn {
  id            Int      @id @default(autoincrement())
  userId        Int
  dealId        Int
  merchantId    Int
  latitude      Float
  longitude     Float
  distanceMeters Float
  createdAt     DateTime @default(now())

  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  deal    Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@index([userId, dealId])
  @@index([merchantId])
}